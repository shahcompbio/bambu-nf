/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]

    withName: NANOPLOT {
        ext.args   = { "--bam ${ontfile} --prefix ${meta.id}. --tsv_stats" }
        cpus       = { 2 * task.attempt }
        memory     = { 40.GB * task.cpus * task.attempt }
        publishDir = [
            path: { "${params.outdir}/nanoplot/${meta.id}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.prefix = { "${meta.id}.filtered" }
        ext.args   = '--output-fmt bam'
        ext.args2  = [
            "chr1",
            "chr2",
            "chr3",
            "chr4",
            "chr5",
            "chr6",
            "chr7",
            "chr8",
            "chr9",
            "chr10",
            "chr11",
            "chr12",
            "chr13",
            "chr14",
            "chr15",
            "chr16",
            "chr17",
            "chr18",
            "chr19",
            "chr20",
            "chr21",
            "chr22",
            "chrX",
            "chrY",
            "chrM",
        ].join(' ')
    }

    withName: FILTER_READS {
        ext.prefix = { "${meta.id}.filtered" }
        ext.args   = "-e \"mapq >= ${params.mapq} && length(seq) >= ${params.read_len} \" --output-fmt bam"
        ext.args2  = ""
        cpus       = { 5 * task.attempt }
        memory     = { 30.GB * task.attempt }
        time       = { 4.h * task.attempt }
    }

    withName: BAMBU_READCLASSES {
        cpus   = { 1 * task.attempt }
        memory = { 200.GB * task.attempt }
        time   = { 6.h * task.attempt }
    }

    withName: BAMBU_MERGE {
        ext.args      = "--quant=FALSE --lowMemory=FALSE"
        ext.yieldsize = "NULL"
        cpus          = { 1 }
        memory        = { rds.size() > 20 ? 300.GB * task.attempt : 200.GB * task.attempt }
        time          = { rds.size() > 20 ? 24.h * task.attempt : 12.h * task.attempt }
    }

    withName: BAMBU_MERGE_QUANT {
        ext.args   = "--discovery=FALSE"
        cpus       = { 1 }
        memory     = { 100.GB * task.attempt }
        time       = { 2.h * task.attempt }
        queue      = { task.attempt > 1 ? 'componc_cpu' : 'cpushort' }
        maxRetries = 2
        publishDir = [
            path: { "${params.outdir}/merge/quant/${meta.id}" },
            mode: 'copy',
            overwrite: true,
        ]
    }
    withName: BAMBU_QUANT {
        tag        = { "${meta.id}" }
        container  = "quay.io/shahlab_singularity/bambu:HongYhong_fix"
        ext.args   = "--discovery=FALSE --lowMemory=FALSE"
        cpus       = { 1 }
        memory     = { 150.GB * task.attempt }
        time       = { 2.h * task.attempt }
        queue      = { task.attempt > 1 ? 'componc_cpu' : 'cpushort' }
        maxRetries = 2
        publishDir = [
            path: { "${params.outdir}/quant/${meta.id}" },
            mode: 'copy',
            overwrite: true,
        ]
    }

    withName: SEQUANT_MERGE {
        publishDir = [
            path: { "${params.outdir}/quant" },
            mode: 'copy',
            overwrite: true,
        ]
    }

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
